name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Add permissions needed for GitHub Container Registry
permissions:
  contents: read
  packages: write

jobs:
  lint-and-typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction --all-extras

      - name: Lint with ruff
        run: |
          poetry run ruff check .

      - name: Type check with pyright
        run: |
          # Create a pyrightconfig.json file to handle CI-specific settings
          echo '{
            "venvPath": "./.venv",
            "venv": ".",
            "reportUnknownVariableType": false,
            "reportUnknownMemberType": false,
            "reportUnknownArgumentType": false,
            "reportGeneralTypeIssues": false,
            "reportMissingImports": false
          }' > pyrightconfig.json
          poetry run pyright .

  test:
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction --all-extras

      - name: Run tests with coverage
        run: |
          poetry run pytest tests/ --cov=src/ --cov-branch --cov-report=xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Output JUnit report
        run: |
          poetry run pytest --cov --junitxml=junit.xml -o junit_family=legacy

      - name: Upload JUnit test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/weather-display
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=semver,pattern={{version}}
            latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to server
        # This is a placeholder. In a real environment, you would have
        # steps to deploy to your Unraid server via SSH, Docker Compose,
        # or other deployment methods.
        run: |
          echo "Deploying to server - this is a placeholder"
          echo "In a real deployment, you would add steps to:"
          echo "- SSH into your Unraid server"
          echo "- Pull the latest Docker image"
          echo "- Restart the container"