name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Add permissions needed for GitHub Container Registry and CodeQL
permissions:
  contents: read
  packages: write
  security-events: write

# Cancel in-progress workflows when a new one starts
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Separate jobs for parallel execution
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Improved caching for Poetry with better key structure
      - name: Cache Poetry installation
        uses: actions/cache@v4
        id: poetry-cache
        with:
          path: ~/.local
          key: poetry-2.1.3-${{ runner.os }}

      - name: Install Poetry
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: 2.1.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-3.11-

      - name: Install dependencies
        run: poetry install --no-interaction --all-extras

      - name: Lint with ruff
        run: poetry run ruff check . --exit-non-zero-on-fix

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Poetry installation
        uses: actions/cache@v4
        id: poetry-cache
        with:
          path: ~/.local
          key: poetry-2.1.3-${{ runner.os }}

      - name: Install Poetry
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: 2.1.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-3.11-

      - name: Install dependencies
        run: poetry install --no-interaction --all-extras

      - name: Type check with pyright
        run: poetry run pyright .

  security:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Poetry installation
        uses: actions/cache@v4
        id: poetry-cache
        with:
          path: ~/.local
          key: poetry-2.1.3-${{ runner.os }}

      - name: Install Poetry
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: 2.1.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-3.11-

      - name: Install dependencies
        run: poetry install --no-interaction --all-extras

      - name: Security scan with safety
        env:
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
        run: |
          # Install safety in isolated environment to avoid dependency conflicts
          pip install --user safety
          # Use safety scan with API key via environment variable
          # Get your free API key at: https://platform.safetycli.com/signup
          # Use --stage cicd to run in non-interactive CI/CD mode
          # Use custom policy file to control what vulnerabilities to report
          safety --key $SAFETY_API_KEY --stage cicd --policy-file .safety-policy.json scan || true

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install code metrics tools
        run: pip install radon

      - name: Code complexity analysis
        run: |
          echo "::group::Code Complexity Analysis"
          radon cc src/ -a -nc
          
          COMPLEX_COUNT=$(radon cc src/ -a -nc --json | grep -E '"rank": "[EF]"' | wc -l || echo "0")
          echo "Complex functions (rank E-F): $COMPLEX_COUNT"
          echo "::endgroup::"
          
          echo "::group::Maintainability Index"
          radon mi src/ -s
          echo "::endgroup::"
          
          if [ "$COMPLEX_COUNT" -gt 5 ]; then
            echo "::error::Too many complex functions ($COMPLEX_COUNT > 5)"
            exit 1
          fi
  
  codeql:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          config-file: ./.github/codeql/codeql-config.yml
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"
          upload: true

  test:
    runs-on: ubuntu-latest
    needs: [lint, typecheck]  # Don't wait for security or code-quality
    strategy:
      matrix:
        test-group: [models, client, server, utils]
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Cache Poetry installation
      - name: Cache Poetry installation
        uses: actions/cache@v4
        id: poetry-cache
        with:
          path: ~/.local
          key: poetry-2.1.3-${{ runner.os }}

      - name: Install Poetry
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: 2.1.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-3.11-
            
      # Playwright browsers cache with version-specific key
      - name: Get Playwright version
        id: playwright-version
        run: |
          PLAYWRIGHT_VERSION=$(poetry show playwright | grep "version" | awk '{print $3}')
          echo "version=$PLAYWRIGHT_VERSION" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}

      - name: Install dependencies
        run: poetry install --no-interaction --all-extras
          
      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: poetry run playwright install chromium --with-deps

      - name: Run tests for ${{ matrix.test-group }}
        run: |
          # Run tests with coverage for the specific module
          poetry run pytest tests/${{ matrix.test-group }}/ \
            --cov=src/rpi_weather_display/${{ matrix.test-group }}/ \
            --cov-branch \
            --cov-report=xml:coverage-${{ matrix.test-group }}.xml \
            --cov-report=term \
            --cov-fail-under=0 \
            -v

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-group }}
          path: coverage-${{ matrix.test-group }}.xml
          retention-days: 1

  coverage:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Download all coverage artifacts
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: true

      # Cache Poetry installation
      - name: Cache Poetry installation
        uses: actions/cache@v4
        id: poetry-cache
        with:
          path: ~/.local
          key: poetry-2.1.3-${{ runner.os }}

      - name: Install Poetry
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: 2.1.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-3.11-
            
      - name: Install dependencies
        run: poetry install --no-interaction --all-extras

      # Cache Playwright browsers
      - name: Get Playwright version
        id: playwright-version
        run: |
          PLAYWRIGHT_VERSION=$(poetry show playwright | grep "version" | awk '{print $3}')
          echo "version=$PLAYWRIGHT_VERSION" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: poetry run playwright install chromium --with-deps
            
      - name: Run all tests with coverage
        run: |
          poetry run pytest \
            --cov=src/rpi_weather_display/ \
            --cov-branch \
            --cov-report=xml \
            --cov-report=term \
            --junitxml=junit.xml
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          # CODECOV_TOKEN is optional for public repos but recommended
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml,./coverage-*.xml
          flags: combined
          name: combined-coverage
          fail_ci_if_error: false
        continue-on-error: true
            
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          # CODECOV_TOKEN is optional for public repos but recommended
          token: ${{ secrets.CODECOV_TOKEN }}
          files: junit.xml
        continue-on-error: true

  build-and-push:
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test]  # Don't wait for coverage, security, or code-quality
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/rpi-weather-display
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64  # Build only amd64 for speed, add ARM in separate job if needed
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          provenance: false

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy notification
        run: |
          echo "::notice title=Deployment Ready::Docker image has been pushed to ghcr.io"
          echo "Image: ghcr.io/${{ github.repository }}/rpi-weather-display:latest"
          echo "To deploy on your Unraid server:"
          echo "1. docker pull ghcr.io/${{ github.repository }}/rpi-weather-display:latest"
          echo "2. docker stop rpi-weather-display"
          echo "3. docker run -d --name rpi-weather-display -p 8000:8000 -v /path/to/config.yaml:/app/config.yaml ghcr.io/${{ github.repository }}/rpi-weather-display:latest"