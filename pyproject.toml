[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "rpi_weather_display"
version = "0.2.0"
description = "Ultra-Low-Power Weather Display for Raspberry Pi"
authors = [
    {name = "Steve Nims", email = "sjnims@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = "~=3.11.12"
keywords = ["raspberry-pi", "weather", "e-ink", "display", "low-power"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "pydantic>=2.5.0",
    "typing-extensions>=4.8.0",
    "pyyaml>=6.0.1",
    "requests>=2.31.0",
    "pillow>=10.1.0",
    "jinja2>=3.1.2",
    "httpx>=0.25.1",
    "structlog>=23.2.0",
]

[project.scripts]
client = "rpi_weather_display.client.main:main"
server = "rpi_weather_display.server.main:main"
pre-commit-hooks = "pre_commit_hooks.main:main"

[project.optional-dependencies]
server = [
    "fastapi>=0.115.0",
    "uvicorn>=0.23.2",
    "playwright>=1.40.0",
]

[tool.poetry]
# Maintaining this section for backward compatibility
packages = [{include = "rpi_weather_display", from = "src"}]

[tool.poetry.dependencies]
python = "~=3.11.12"
pydantic = "^2.5.0"
typing-extensions = "^4.8.0"
pyyaml = "^6.0.1"
requests = "^2.31.0"
pillow = "^10.1.0"
jinja2 = "^3.1.2"
httpx = "^0.25.1"
structlog = "^23.2.0"

# Server dependencies
fastapi = {version = "^0.115.0", optional = true}
uvicorn = {version = "^0.23.2", optional = true}
playwright = {version = "^1.40.0", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-asyncio = "^0.21.1"
pytest-benchmark = "^4.0.0"
pytest-xdist = "^3.3.1"
pytest-html = "^4.1.1"
pytest-env = "^1.0.1"
pytest-timeout = "^2.2.0"
httpx = "^0.25.1"
hypothesis = "^6.87.1"
ruff = "^0.5.3"
pyright = "^1.1.401"
pre-commit = "^3.5.0"
freezegun = "^1.2.0"
yamllint = "^1.37.1"
radon = "^6.0.1"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.2.6"
sphinx-rtd-theme = "^2.0.0"
sphinx-autodoc-typehints = "^1.24.0"
myst-parser = "^2.0.0"

# No Raspberry Pi specific dependencies in the Poetry configuration

[tool.pyright]
include = ["src", "tests"]
exclude = ["**/node_modules", "**/__pycache__", ".venv", ".git", ".ruff_cache", "**/site-packages/**"]
stubPath = "stubs"
reportMissingImports = true
reportImportCycles = true
reportMissingTypeStubs = false
useLibraryCodeForTypes = true
reportUnknownMemberType = "warning"
reportUnnecessaryTypeIgnoreComment = "none"
reportPrivateUsage = "warning"
reportUnusedFunction = "none"
reportUntypedFunctionDecorator = "none"
pythonVersion = "3.11"
pythonPlatform = "Linux"
typeCheckingMode = "strict"

# Execution environments need to be in proper TOML format
[[tool.pyright.executionEnvironments]]
root = "src"
extraPaths = ["src"]

[[tool.pyright.executionEnvironments]]
root = "tests"
extraPaths = ["src", "tests"]
reportMissingImports = false
reportUnknownParameterType = "none"
reportMissingParameterType = "none"
reportUnknownLambdaType = "none"
reportUnknownMemberType = "none"
reportUnknownArgumentType = "none"
reportIncompatibleMethodOverride = "warning"
reportUnknownVariableType = "none"
reportUntypedFunctionDecorator = "none"
reportUntypedClassDecorator = "none"
reportUntypedBaseClass = "none"
reportUnusedFunction = "none"
reportUnusedVariable = "none"
reportUnusedImport = "warning"
reportPrivateUsage = "none"
reportConstantRedefinition = "none"
reportIncompatibleVariableOverride = "none"

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
ignore = ["ANN101", "ANN102"]
select = ["E", "F", "B", "I", "N", "UP", "ANN", "S", "A", "C4", "PT", "RUF", "D"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # Use of assert detected (pytest uses assertions)
    "ANN201",  # Missing return type annotation for public function
    "ANN001",  # Missing type annotations for function arguments
    "ANN401",  # Dynamically typed expressions (Any) are disallowed
    "E501",    # Line too long (handled by formatter)
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "S105",    # Possible hardcoded password (test data often looks like this)
    "S106",    # Possible hardcoded password (test data)
    "S108",    # Probable insecure usage of temp file/directory
    "ARG001",  # Unused function argument (common in test fixtures)
    "ARG002",  # Unused method argument
    "C901",    # Function is too complex (tests can be complex)
    "PLR0915", # Too many statements
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["rpi_weather_display"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--cov=src/rpi_weather_display --cov-branch --cov-report=html --cov-report=term-missing:skip-covered --cov-report=term -vv --showlocals --durations=10 --no-header"
timeout = 300
env = [
    "DEVELOPMENT_MODE=1",
    "TESTING=1"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
precision = 2
show_missing = true
skip_covered = true
fail_under = 94